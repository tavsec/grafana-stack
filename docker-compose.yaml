version: "3"
networks:
  grafana_stack:

services:
  tempo:
    image: grafana/tempo:latest
    command: "-config.file=/etc/tempo.yaml -config.expand-env=true"
    env_file:
      - .env
    volumes:
      - ./tempo-s3.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"      # jaeger
      - "3200:3200"  # tempo
      - "9411:9411"   # zipkin
    restart: on-failure
    networks:
      - grafana_stack

  k6-tracing:
    image: ghcr.io/grafana/xk6-client-tracing:v0.0.2
    env_file:
      - .env
    environment:
      - ENDPOINT=tempo:4317
    restart: always
    depends_on:
      - tempo
    networks:
      - grafana_stack

  prometheus:
    image: prom/prometheus:latest
    env_file:
      - .env
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - .//prometheus.yaml:/etc/prometheus.yaml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - grafana_stack

  grafana:
    image: grafana/grafana:9.4.7
    env_file:
      - .env
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./loki-datasource.yaml:/etc/grafana/provisioning/datasources/loki.yaml
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    networks:
      - grafana_stack
    
  read:
    image: grafana/loki:2.8.0
    env_file:
      - .env
    command: "-config.file=/etc/loki/config.yaml -target=read -config.expand-env=true"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &grafana_stack-dns
      grafana_stack:
        aliases:
          - loki

  write:
    image: grafana/loki:2.8.0
    env_file:
      - .env
    command: "-config.file=/etc/loki/config.yaml -target=write -config.expand-env=true"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      <<: *grafana_stack-dns

  promtail:
    image: grafana/promtail:2.8.0
    volumes:
      - ./promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - grafana_stack

  gateway:
    image: nginx:latest
    env_file:
      - .env
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grafana_stack

volumes:
  grafana-storage:
  prometheus-data: